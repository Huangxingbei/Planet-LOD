

uniform vec4 p1,d2,d3;
uniform vec4 n1,nd2,nd3;
uniform vec4 n1x,nd2x,nd3x;
uniform int fractal_enabled;
uniform int normalize_enabled;

varying vec3 n;

// noise from https://www.shadertoy.com/view/4tjGRh 
// http://reindernijhoff.net/2015/05/rendering-a-planet-with-two-triangles/

float hash( const in float n ) {
    return fract(sin(n)*43758.5453123);
}
float noise( const in  vec3 x ) {
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
    float n = p.x + p.y*157.0 + 113.0*p.z;
    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),
               mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}
float terrainMapH(vec3 n)
{
  float h=0.0,f=640000.0;
  while(f>40.0f)	
  {
	h=h*0.5+ noise(n*f);
	f/=2.0f;
  }
  return 1.0-clamp(h*0.5,0.0,1.0);//-0.61;
}

void main(void)
{
	vec4 p = p1+(d2*gl_Vertex.x+d3*gl_Vertex.y);
	n = n1.xyz+(nd2.xyz*gl_Vertex.x+nd3.xyz*gl_Vertex.y);
	n = normalize(n);

	float h= fractal_enabled==0 ? 0.0 : terrainMapH(n.xyz);

	if(normalize_enabled==1)
	{
		p.xyz = n.xyz * (1.0-0.006*h);
		p.w=1.0;
		p = gl_ModelViewProjectionMatrix*p;
	}
	else
	{
		vec4 nx = n1x+(nd2x*gl_Vertex.x+nd3x*gl_Vertex.y);	
		p += nx * h;
	}

	gl_Position = p;
}

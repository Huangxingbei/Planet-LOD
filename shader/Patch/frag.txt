uniform int fractal_enabled;
varying vec3 n;

// noise from https://www.shadertoy.com/view/4tjGRh 
// http://reindernijhoff.net/2015/05/rendering-a-planet-with-two-triangles/

float hash( const in float n ) {
    return fract(sin(n)*43758.5453123);
}
float noise( const in  vec3 x ) {
    vec3 p = floor(x);
    vec3 f = fract(x);
    f = f*f*(3.0-2.0*f);
    float n = p.x + p.y*157.0 + 113.0*p.z;
    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),
                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),
               mix(mix( hash(n+113.0), hash(n+114.0),f.x),
                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);
}
float terrainMapH(vec3 n)
{
  float h=0.0,f=640000.0;
  while(f>40.0f)	
  {
	h=h*0.5+ noise(n*f);
	f/=2.0;
  }
  return clamp(h*0.5,0.0,1.0);//-0.61;
}
vec3 terrainCalcNormalHigh( in vec3 pos, float t ) {
    vec2 e = vec2(1.0,-1.0)*0.001*t;

    return normalize( e.xyy*terrainMapH( pos + e.xyy ) + 
					  e.yyx*terrainMapH( pos + e.yyx ) + 
					  e.yxy*terrainMapH( pos + e.yxy ) + 
					  e.xxx*terrainMapH( pos + e.xxx ) );
}

void main(void)
{
	vec4 c=vec4(n.xyz,1.0);

	if(fractal_enabled==1) 
	{
		float h= terrainMapH(n);	
		vec3 nrm=	terrainCalcNormalHigh(n,0.001);
		c=vec4(1.0,1.0,1.0,1.0);
		if (h<0.75)   c=vec4(h,h,h*0.1,1.0);
		if (h<0.5)    c=vec4(0.0,h,0.0,1.0);
		if (h<0.505 ) c=vec4(h*3.0,h*2.0,h/2.0,1.0);
		if (h<0.50)    c=vec4(0.0,0.0,h,1.0);
		c.xyz = c.xyz*(nrm.x*0.5+0.5);
	}

	gl_FragColor =  c;

}
